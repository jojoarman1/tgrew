from aiogram import types
from aiogram.dispatcher import FSMContext
from app import dp
from .admin.functions_for_active_gives.handle_new_members_from_button_giveaways import manage_new_members_from_button_gives
from .admin.functions_for_active_gives.check_channels_subscriptions import check_channels_subscriptions
from database import TemporaryUsers, GiveAwayStatistic, ReferralStatistic
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

start_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
admin_id = 1247124939  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
faq_texts = {
    'how_it_works': (
        "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n"
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. "
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –≤ –ø–∞–±–ª–∏–∫–µ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. "
        "–í—ã–ø–æ–ª–Ω–∏–≤ –≤—Å–µ —É—Å–ª–æ–≤–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–±–µ–¥—É –∏ –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!"
    ),
    'referral_system': (
        "üë• <b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
        "–ï—Å–ª–∏ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, —Ç–æ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ –∏ –≤—ã ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∞–º–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏! "
        "–ü—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π, –≤—ã –Ω–µ —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –¥–ª—è –Ω–∏—Ö, –Ω–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏. "
        "–≠—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–º—É–ª –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–≥–æ–¥—É –æ—Ç –∏—Ö —É—Å–ø–µ—Ö–æ–≤!"
    ),
    'invitation_rules': (
        "ü§ù <b>–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –µ—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—à–ª–∏ –≤ –±–æ—Ç–∞ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å. "
        "–¢–∞–∫–∂–µ —Å–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –∫–∞–∫ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º. "
        "–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ –±–æ—Ç–∞.\n"
    )
}

required_referrals = 1

@dp.message_handler(commands=['ref'])
async def change_referral_count(jam: types.Message):
    global required_referrals
    if jam.from_user.id == admin_id:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_value = int(jam.text.split()[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if new_value < 0:
                await jam.answer('‚ùå <b>–ß–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.</b>')
                return
            required_referrals = new_value
            await jam.answer(f'‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {required_referrals}.</b>')
        except (IndexError, ValueError):
            await jam.answer('‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.</b>')
    else:
        await jam.answer('‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>')


async def get_channel_invite_link(channel_username: str) -> str:
    try:
        channel = await dp.bot.get_chat(channel_username)
        invite_link = await channel.export_chat_invite_link()
        return invite_link
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {channel_username}: {e}")
        return f"https://t.me/{channel_username}"


@dp.message_handler(commands=['start'], state='*')
async def process_start(jam: types.Message, state: FSMContext):
    await state.finish()

    # Check if the user has a username
    if not jam.from_user.username:
        await jam.answer("‚ùå <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username –≤ Telegram. "
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>")
        return

    if ' ' in jam.text:
        give_callback_value = jam.text.split(' ')[1]
        if 'referral=' in give_callback_value:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            referrer_id = int(give_callback_value.split('=')[1])
            referred_user_id = jam.from_user.id

            try:
                await ReferralStatistic.add_referral(user_id=referrer_id, referred_user_id=referred_user_id)
                await dp.bot.send_message(referrer_id, f'üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{jam.from_user.username}!')
                await jam.answer("üíé  <b>–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –±–æ—Ç–∞!</b>")
            except ValueError as e:
                await jam.answer(f"‚ùå {e}")

        elif '=watchresult' in give_callback_value:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            await TemporaryUsers().add_user(
                callback_value=give_callback_value,
                new_member_id=jam.from_user.id,
                new_member_username=jam.from_user.username
            )
            await jam.answer('üíé  <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –æ–∂–∏–¥–∞–π—Ç–µ!</b>')

        else:
            try:
                is_subscribed, unsubscribed_channels = await check_channels_subscriptions(
                    give_callback_value=give_callback_value,
                    user_id=jam.from_user.id
                )

                if is_subscribed:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                    referral_count = await ReferralStatistic.get_referral_count(user_id=jam.from_user.id)
                    if referral_count < required_referrals:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        kb_unsubscribed = InlineKeyboardMarkup()

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
                        participate_again_link = f"https://t.me/MYWMESTE_bot?start={give_callback_value}"
                        bt_participate_again = InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=participate_again_link)
                        kb_unsubscribed.add(bt_participate_again)

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
                        referral_link = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: https://t.me/MYWMESTE_bot?start=referral={jam.from_user.id}"
                        bt_invite_friend = InlineKeyboardButton(
                            '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
                            switch_inline_query=referral_link
                        )
                        kb_unsubscribed.add(bt_invite_friend)

                        await jam.answer(
                            f'üíé –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º {required_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.',
                            reply_markup=kb_unsubscribed
                        )
                        return

                    await manage_new_members_from_button_gives(
                        jam=jam,
                        state=state,
                        give_callback_value=give_callback_value
                    )
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
                    kb_unsubscribed = InlineKeyboardMarkup()
                    for channel in unsubscribed_channels:
                        invite_link = channel.get('invite_link') or await get_channel_invite_link(
                            channel['channel_name'])
                        bt_channel = InlineKeyboardButton(channel['channel_name'], url=invite_link)
                        kb_unsubscribed.add(bt_channel)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
                    participate_again_link = f"https://t.me/MYWMESTE_bot?start={give_callback_value}"
                    bt_participate_again = InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=participate_again_link)
                    kb_unsubscribed.add(bt_participate_again)
                    await jam.answer(
                        '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:\n\n',
                        reply_markup=kb_unsubscribed
                    )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                await jam.answer('üíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.')


    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await state.finish()

        bt_admin_create_give = InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='admin_gives')
        bt_admin_created_gives = InlineKeyboardButton('–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='admin_created_gives')
        bt_admin_started_gives = InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='admin_started_gives')
        kb_admin_menu = InlineKeyboardMarkup().add(bt_admin_create_give, bt_admin_created_gives).add(
            bt_admin_started_gives)

        referral_link = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: https://t.me/MYWMESTE_bot?start=referral={jam.from_user.id}"
        bt_invite_friend = InlineKeyboardButton(
            '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
            switch_inline_query=referral_link
        )
        bt_my_referrals = InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data='my_referrals')
        bt_faq = InlineKeyboardButton('–í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–≤–µ—Ç—ã', callback_data='faq')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è FAQ

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        kb_user_menu = InlineKeyboardMarkup().add(bt_invite_friend, bt_my_referrals).add(bt_faq)

        if jam.from_user.id == admin_id:
            await jam.answer(start_text, reply_markup=kb_admin_menu)
        else:
            await jam.answer(
                '<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üíé',
                reply_markup=kb_user_menu
            )


async def is_user_participating(self, giveaway_callback_value: str, user_id: int) -> bool:
    data = await self.filter(giveaway_callback_value=giveaway_callback_value).values('users')
    if data:
        return any(user['user_id'] == user_id for user in data[0]['users'])
    return False

async def add_winner_and_check_referrals(self, giveaway_id: str, winner_id: int) -> list:
    referrals = await ReferralStatistic.get_referrals(user_id=winner_id)
    additional_winners = []

    referred_user_ids = [ref['referred_user_id'] for ref in referrals]
    participating_users = await TemporaryUsers().filter(
        giveaway_callback_value=giveaway_id,
        users__contains=referred_user_ids
    ).values('users')

    for ref_user_id in referred_user_ids:
        if any(user['user_id'] == ref_user_id for user in participating_users[0]['users']):
            additional_winners.append(ref_user_id)
            await GiveAwayStatistic.add_winner(giveaway_id, ref_user_id)

    return additional_winners

async def get_winners(self, giveaway_callback_value: str) -> list:
    data = await self.filter(giveaway_callback_value=giveaway_callback_value).values('winners')
    return data[0]['winners'] if data else []


@dp.callback_query_handler(lambda c: c.data == 'my_referrals')
async def my_referrals(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    referrals = await ReferralStatistic.get_referrals(user_id)

    if referrals:
        referral_list = "\n".join([f"- ID: {ref['referred_user_id']}" for ref in referrals])
        text = f'–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{referral_list}'
    else:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.'

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
    back_markup = InlineKeyboardMarkup().add(back_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(text, reply_markup=back_markup)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –Ω–∞–∂–∞—Ç–∏—è

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def back_to_menu(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    bt_admin_create_give = InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='admin_gives')
    bt_admin_created_gives = InlineKeyboardButton('–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='admin_created_gives')
    bt_admin_started_gives = InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='admin_started_gives')
    kb_admin_menu = InlineKeyboardMarkup().add(bt_admin_create_give, bt_admin_created_gives).add(bt_admin_started_gives)

    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_link = f"https://t.me/MYWMESTE_bot?start=referral={callback_query.from_user.id}"
    share_text = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: {referral_link}"

    bt_invite_friend = InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', switch_inline_query=share_text)
    bt_my_referrals = InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data='my_referrals')
    bt_faq = InlineKeyboardButton('–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', callback_data='faq')  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è FAQ

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    kb_user_menu = InlineKeyboardMarkup().add(bt_invite_friend, bt_my_referrals).add(bt_faq)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback_query.from_user.id == admin_id:
        await callback_query.message.edit_text(start_text, reply_markup=kb_admin_menu)
    else:
        await callback_query.message.edit_text(
            'üíé  <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.</b>',
            reply_markup=kb_user_menu
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–≤–µ—Ç—ã"
@dp.callback_query_handler(lambda c: c.data == 'faq')
async def faq_menu(callback_query: types.CallbackQuery):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é FAQ
    bt_how_it_works = InlineKeyboardButton('–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data='how_it_works')
    bt_referral_system = InlineKeyboardButton('–°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data='referral_system')
    bt_invite_friends = InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π', callback_data='invite_friends')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    bt_contact_support = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', url='https://t.me/Statenkov')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    bt_back = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É FAQ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    kb_faq = InlineKeyboardMarkup().add(bt_how_it_works, bt_referral_system).add(bt_invite_friends,
                                                                                 bt_contact_support).add(bt_back)

    await callback_query.message.edit_text('üìñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</b>', reply_markup=kb_faq)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
@dp.callback_query_handler(lambda c: c.data == 'how_it_works')
async def how_it_works(callback_query: types.CallbackQuery):
    text = faq_texts['how_it_works']
    back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='faq')
    markup = InlineKeyboardMarkup().add(back_button)

    await callback_query.message.edit_text(text, reply_markup=markup)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
@dp.callback_query_handler(lambda c: c.data == 'referral_system')
async def referral_system(callback_query: types.CallbackQuery):
    text = faq_texts['referral_system']
    back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='faq')
    markup = InlineKeyboardMarkup().add(back_button)

    await callback_query.message.edit_text(text, reply_markup=markup)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π"
@dp.callback_query_handler(lambda c: c.data == 'invite_friends')
async def invite_friends(callback_query: types.CallbackQuery):
    text = faq_texts['invitation_rules']
    back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='faq')
    markup = InlineKeyboardMarkup().add(back_button)

    await callback_query.message.edit_text(text, reply_markup=markup)
    await callback_query.answer()
