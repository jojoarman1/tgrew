from aiogram import types
from aiogram.dispatcher import FSMContext

from app import bot, dp
from database import TelegramChannel
from states import CreatedGivesStates
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

bt_admin_add_channel = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='admin_add_channel')
bt_admin_active_channels = InlineKeyboardButton('–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', callback_data='admin_active_channels')
bt_admin_cancel_action = InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='admin_cancel_action')
kb_admin_cancel_action = InlineKeyboardMarkup().add(bt_admin_cancel_action)
kb_admin_manage_channels = InlineKeyboardMarkup().add(bt_admin_add_channel).add(bt_admin_active_channels).add(bt_admin_cancel_action)

bt_admin_add_group_for_channel = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='admin_add_group')
bt_admin_delete_channel = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='admin_delete_channel')




@dp.callback_query_handler(
    text=bt_admin_add_group_for_channel.callback_data,
    state=CreatedGivesStates.show_connected_channel
)
async def add_new_group_for_channel(
        jam: types.CallbackQuery,
        state: FSMContext
):
    state_data = await state.get_data()

    bot_data = await bot.get_me()
    await jam.message.edit_text(
        f'1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{bot_data.username} –≤ –≥—Ä—É–ø–ø—É –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏: \n<code>- –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</code>\n\n2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ä–µ–ø–æ—Å—Ç–æ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: ',
        reply_markup=kb_admin_cancel_action
    )
    await CreatedGivesStates.add_group.set()





@dp.message_handler(
    state=CreatedGivesStates.add_group,
)
async def get_group_data(
    jam: types.Message,
    state: FSMContext
):
    try:

        group_data = jam.forward_from_chat

        if group_data.type == 'supergroup':

            member_info = await bot.get_chat_member(
                chat_id=group_data.id,
                user_id=bot.id
            )

            if member_info.status == 'administrator':
                state_data = await state.get_data()
                channel_callback_value = state_data['channel_callback_value']

                await TelegramChannel().filter(channel_callback_value=channel_callback_value).update(
                    group_id=group_data.id
                )

                await jam.answer(
                    '‚úÖ  <b>–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>',
                    reply_markup=kb_admin_manage_channels
                )
                await CreatedGivesStates.manage_channels.set()


        else:
            await jam.answer(
                'üö´  <b>–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b> ',
                reply_markup=kb_admin_cancel_action
            )


    except Exception as error:
        await jam.answer(
            'üö´  <b>–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Ä–µ–ø–æ—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑:</b> ',
            reply_markup=kb_admin_cancel_action
        )
